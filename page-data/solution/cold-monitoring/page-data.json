{"componentChunkName":"component---src-pages-solution-cold-monitoring-index-mdx","path":"/solution/cold-monitoring/","result":{"pageContext":{"frontmatter":{"title":"Vaccine Cold Chain Monitoring","description":"This microservice monitoring refrigerator telemetries"},"relativePagePath":"/solution/cold-monitoring/index.mdx","titleType":"append","MdxNode":{"id":"d2550a39-c1e8-5be2-a0fd-1c562c8e3ce2","children":[],"parent":"b555e3f5-81a8-55a3-ba54-97dadd6d0307","internal":{"content":"---\ntitle: Vaccine Cold Chain Monitoring\ndescription: This microservice monitoring refrigerator telemetries\n---\n<PageDescription>\nThis microservice aims to monitor the cold-chain over time and to assess is the refrigerator is still running according to specifications.\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Usage Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nThe reefer monitoring agent get telemetry events from a kafka topic and process them using stateful operation on time window, and then creates reefer-cold-chain-violation event to the reefer kafka topic in case the temperature goes over a define threshold over a specific time period. For each received metrics it can also call an anomaly detection service to compute the risk of failure. \n\n![](./images/cold-monitoring-1.png)\n\nIn case of cold chain violation the impacted lots needs to be reported as spoiled via new records logged to the blockchain hyperledger. This is the responsability of the reefer manager microservice has it has visibility of the loaded vaccine lots for each container. Telemetry events have information on the sensors and the geolocation of the reefer.\n\n**Github repository:** [vaccine-cold-monitoring](https://github.ibm.com/vaccine-cold-chain/coldchainmonitoring)\n\n**Kafka topics consumed from:** telemetries as defined by:\n\n```yaml\napiVersion: kafka.strimzi.io/v1beta1\n  kind: KafkaTopic\n  metadata:\n    name: telemetries\n    labels:\n      strimzi.io/cluster: event-streams\n  spec:\n    partitions: 10\n    replicas: 3\n    config:\n      retention.ms: 14400000\n      segment.bytes: 1073741824\n```\n\n**Kafka topics produced to:** reefers in case of anomaly detection or cold chain violation\n\n**Events reacted to:** telemetry events like:\n\n```java\npublic class TelemetryEvent {\n\n    public String containerID;\n    public Telemetry payload;\n    public String timestamp;\n    public String type;\n```\n\nand the payload:\n\n```java\n public String container_id;\n    public String measurement_time;\n    public String product_id;\n    public double temperature;\n    public double target_temperature; \n    public double ambiant_temperature; \n    public double kilowatts; \n    public double time_door_open;\n    public int content_type; \n    public int defrost_cycle;\n    public double oxygen_level; \n    public double nitrogen_level; \n    public double humidity_level;\n    public double target_humidity_level;\n    public double carbon_dioxide_level; \n    public boolean fan_1; \n    public boolean fan_2; \n    public boolean fan_3;\n    public double latitude;\n    public double longitude;\n  \n```\n**Events produced:** reefer anomaly detected and reefer cold chain violated\n\n## Build\n\nThis microservice is built using the [Appsody](https://appsody.dev/) development framework. The [Appsody CLI](https://appsody.dev/docs/installing/installing-appsody) is a required prerequisite for building the application locally.\n\nAppsody will build the application by pulling the contents of the Appsody [Garage solution engineering Quarkus Stack](https://github.com/jbcodeforce/appsody-stacks/tree/master/ibm-gse-eda-quarkus) it is based on and then performing the local application build inside the containerized environment:\n\n```shell\n# if not logged yes to your openshift cluster where the docker private registry resides do:\noc login --token=... --server=https://c...\n# Get the route to reach the docker private registry\noc get route --all-namespaces | grep registry\n# Define the path as environment variable\nexport IMAGE_REGISTRY=default-route-openshift-image-registry.gse-eda-demo-202005-fa9ee67c9ab6a7791435450358e564cc-0000.us-south.containers.appdomain.cloud\n# log to the docker registry using the security token from the openshift console\ndocker login $IMAGE_REGISTRY\n# Then build and push the image\nappsody build -t vaccine-cold-chain/vaccine-cold-monitoring:0.0.1 [--push-url $IMAGE_REGISTRY] [--push]\n```\n\n- You can optionally specify a container tag. If left blank, `latest` will be used.\n- You can optionally supply the `--push` flag to automatically push the built image to specified remote repository `--push-url`.\n\nPerforming an Appsody build will update the `app-deploy.yaml` file in the same directory with current information for the application image, labels, and annotations fields.\n\nThis file needs to be updated to include the different environment variables needed by the application:\n\n### Deployment Parameters\n\nThe following deployment parameters are defined in the `app-deploy.yaml` file:\n\n| Name                                     | Required | Description                                                                                                            |\n|------------------------------------------|----------|------------------------------------------------------------------------------------------------------------------------|\n| KAFKA_BROKERS                            | YES      | Comma-separated list of Kafka brokers to connect to                                                                    |\n| KAFKA_APIKEY                             | NO       | API Key used to connect to SASL-secured Kafka brokers. This is required when connecting to IBM Event Streams clusters. |\n| TRUSTSTORE_ENABLED                       | NO       | Required to be set to `true` when connecting to IBM Event Streams on the IBM Cloud Pak for Integration (CP4I).         |\n| TRUSTSTORE_PATH                          | NO       | The local path to the required truststore file when connecting to IBM Event Streams on CP4I. See [**Volume Mounts**](#volume-mounts) below.  |\n| TRUSTSTORE_PWD                           | NO       | The password for the truststore file used for IBM Event Streams server verification.                                   |\n| TELEMETRIES_TOPIC | NO | Topic name for the IoT telemetry related events. Defaulted to `telemetries` |\n| REEFER_TOPIC | NO | Topic name for the reefer related events. Defaulted to `reefers` |\n| ANOMALY_DETECTION_URL| NO | URL for the anomaly detection predictive scoring as deployed in Watson ML in Cloud Pak for Data. If not set the reefer monitoring agent will not try to call the scoring. |\n| WL_TOKEN | NO | Authentication bearer token to access the anomaly detection end point.|\n\n## Run \n\n### Volume mounts\n\nThe cold chain monitoring microservice requires up to one file to be injected at runtime for proper operation. As noted in the `TRUSTSTORE_PATH` parameter above, these files are SSL-based certificates which are required to verify the identity of the external service when calling it. These files are provided as `--docker-options \"-v host-src:container-dest ...\"` when running the microservice locally and as a Volume Mount when running the microservice on a Kubernetes cluster.\n\nThe `TRUSTSTORE_PATH` parameter is documented in the **Event Streams Certificates** section of the [Prerequisites](/microservices/prereqs/#ibm-event-streams-on-redhat-openshift-container-platform) page. The Appsody run command should include a parameter similar to `-v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks` in its `--docker-options` string to run this microservice locally.\n\n**Example:** `appsody run --docker-options \"-v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks\" ...`\n\n### Running locally\n\nWhen running the microservice locally, you must specify all the required [deployment parameters](#deployment-parameters) from above as environment variables via the `--docker-options` flag being passed in from the Appsody CLI command.\n\n**Example:** `appsody run --docker-options \"-e KAFKA_BROKERS=remotebroker1:9092,remotebroker2:9092 -e TELEMETRIES_TOPIC=telemetries -e REEFER_TOPIC=reefers -v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks\" ...`\n\nFor more details on running the microservice locally, consult the Appsody run documentation as well as the deployment information contained in the app-deploy.yaml file.\n\n### Running remotely \n\nThe [Appsody Operator](https://appsody.dev/docs/reference/appsody-operator/) is a required prerequisite for deploying the microservice to a remote Kubernetes or OpenShift cluster.\n\nTo deploy the microservice to a remote cluster:\n\n`appsody deploy ibmcase/[:tag] --no-build`\n\n- You can omit the `--no-build` flag to have Appsody perform a build before deploying the application.\n- _**Note:**_ Performing a build at deploy time requires specifying the absolute container reference path, as well as the `--push` flag.\n- The neccesary deployment parameter information will be read from the `app-deploy.yaml` file in the same directory.\n\n## Usage Details\n\n### REST APIs","type":"Mdx","contentDigest":"8fc1deea37291ef3131784e93a4875c6","counter":253,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Vaccine Cold Chain Monitoring","description":"This microservice monitoring refrigerator telemetries"},"exports":{},"rawBody":"---\ntitle: Vaccine Cold Chain Monitoring\ndescription: This microservice monitoring refrigerator telemetries\n---\n<PageDescription>\nThis microservice aims to monitor the cold-chain over time and to assess is the refrigerator is still running according to specifications.\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Usage Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nThe reefer monitoring agent get telemetry events from a kafka topic and process them using stateful operation on time window, and then creates reefer-cold-chain-violation event to the reefer kafka topic in case the temperature goes over a define threshold over a specific time period. For each received metrics it can also call an anomaly detection service to compute the risk of failure. \n\n![](./images/cold-monitoring-1.png)\n\nIn case of cold chain violation the impacted lots needs to be reported as spoiled via new records logged to the blockchain hyperledger. This is the responsability of the reefer manager microservice has it has visibility of the loaded vaccine lots for each container. Telemetry events have information on the sensors and the geolocation of the reefer.\n\n**Github repository:** [vaccine-cold-monitoring](https://github.ibm.com/vaccine-cold-chain/coldchainmonitoring)\n\n**Kafka topics consumed from:** telemetries as defined by:\n\n```yaml\napiVersion: kafka.strimzi.io/v1beta1\n  kind: KafkaTopic\n  metadata:\n    name: telemetries\n    labels:\n      strimzi.io/cluster: event-streams\n  spec:\n    partitions: 10\n    replicas: 3\n    config:\n      retention.ms: 14400000\n      segment.bytes: 1073741824\n```\n\n**Kafka topics produced to:** reefers in case of anomaly detection or cold chain violation\n\n**Events reacted to:** telemetry events like:\n\n```java\npublic class TelemetryEvent {\n\n    public String containerID;\n    public Telemetry payload;\n    public String timestamp;\n    public String type;\n```\n\nand the payload:\n\n```java\n public String container_id;\n    public String measurement_time;\n    public String product_id;\n    public double temperature;\n    public double target_temperature; \n    public double ambiant_temperature; \n    public double kilowatts; \n    public double time_door_open;\n    public int content_type; \n    public int defrost_cycle;\n    public double oxygen_level; \n    public double nitrogen_level; \n    public double humidity_level;\n    public double target_humidity_level;\n    public double carbon_dioxide_level; \n    public boolean fan_1; \n    public boolean fan_2; \n    public boolean fan_3;\n    public double latitude;\n    public double longitude;\n  \n```\n**Events produced:** reefer anomaly detected and reefer cold chain violated\n\n## Build\n\nThis microservice is built using the [Appsody](https://appsody.dev/) development framework. The [Appsody CLI](https://appsody.dev/docs/installing/installing-appsody) is a required prerequisite for building the application locally.\n\nAppsody will build the application by pulling the contents of the Appsody [Garage solution engineering Quarkus Stack](https://github.com/jbcodeforce/appsody-stacks/tree/master/ibm-gse-eda-quarkus) it is based on and then performing the local application build inside the containerized environment:\n\n```shell\n# if not logged yes to your openshift cluster where the docker private registry resides do:\noc login --token=... --server=https://c...\n# Get the route to reach the docker private registry\noc get route --all-namespaces | grep registry\n# Define the path as environment variable\nexport IMAGE_REGISTRY=default-route-openshift-image-registry.gse-eda-demo-202005-fa9ee67c9ab6a7791435450358e564cc-0000.us-south.containers.appdomain.cloud\n# log to the docker registry using the security token from the openshift console\ndocker login $IMAGE_REGISTRY\n# Then build and push the image\nappsody build -t vaccine-cold-chain/vaccine-cold-monitoring:0.0.1 [--push-url $IMAGE_REGISTRY] [--push]\n```\n\n- You can optionally specify a container tag. If left blank, `latest` will be used.\n- You can optionally supply the `--push` flag to automatically push the built image to specified remote repository `--push-url`.\n\nPerforming an Appsody build will update the `app-deploy.yaml` file in the same directory with current information for the application image, labels, and annotations fields.\n\nThis file needs to be updated to include the different environment variables needed by the application:\n\n### Deployment Parameters\n\nThe following deployment parameters are defined in the `app-deploy.yaml` file:\n\n| Name                                     | Required | Description                                                                                                            |\n|------------------------------------------|----------|------------------------------------------------------------------------------------------------------------------------|\n| KAFKA_BROKERS                            | YES      | Comma-separated list of Kafka brokers to connect to                                                                    |\n| KAFKA_APIKEY                             | NO       | API Key used to connect to SASL-secured Kafka brokers. This is required when connecting to IBM Event Streams clusters. |\n| TRUSTSTORE_ENABLED                       | NO       | Required to be set to `true` when connecting to IBM Event Streams on the IBM Cloud Pak for Integration (CP4I).         |\n| TRUSTSTORE_PATH                          | NO       | The local path to the required truststore file when connecting to IBM Event Streams on CP4I. See [**Volume Mounts**](#volume-mounts) below.  |\n| TRUSTSTORE_PWD                           | NO       | The password for the truststore file used for IBM Event Streams server verification.                                   |\n| TELEMETRIES_TOPIC | NO | Topic name for the IoT telemetry related events. Defaulted to `telemetries` |\n| REEFER_TOPIC | NO | Topic name for the reefer related events. Defaulted to `reefers` |\n| ANOMALY_DETECTION_URL| NO | URL for the anomaly detection predictive scoring as deployed in Watson ML in Cloud Pak for Data. If not set the reefer monitoring agent will not try to call the scoring. |\n| WL_TOKEN | NO | Authentication bearer token to access the anomaly detection end point.|\n\n## Run \n\n### Volume mounts\n\nThe cold chain monitoring microservice requires up to one file to be injected at runtime for proper operation. As noted in the `TRUSTSTORE_PATH` parameter above, these files are SSL-based certificates which are required to verify the identity of the external service when calling it. These files are provided as `--docker-options \"-v host-src:container-dest ...\"` when running the microservice locally and as a Volume Mount when running the microservice on a Kubernetes cluster.\n\nThe `TRUSTSTORE_PATH` parameter is documented in the **Event Streams Certificates** section of the [Prerequisites](/microservices/prereqs/#ibm-event-streams-on-redhat-openshift-container-platform) page. The Appsody run command should include a parameter similar to `-v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks` in its `--docker-options` string to run this microservice locally.\n\n**Example:** `appsody run --docker-options \"-v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks\" ...`\n\n### Running locally\n\nWhen running the microservice locally, you must specify all the required [deployment parameters](#deployment-parameters) from above as environment variables via the `--docker-options` flag being passed in from the Appsody CLI command.\n\n**Example:** `appsody run --docker-options \"-e KAFKA_BROKERS=remotebroker1:9092,remotebroker2:9092 -e TELEMETRIES_TOPIC=telemetries -e REEFER_TOPIC=reefers -v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks\" ...`\n\nFor more details on running the microservice locally, consult the Appsody run documentation as well as the deployment information contained in the app-deploy.yaml file.\n\n### Running remotely \n\nThe [Appsody Operator](https://appsody.dev/docs/reference/appsody-operator/) is a required prerequisite for deploying the microservice to a remote Kubernetes or OpenShift cluster.\n\nTo deploy the microservice to a remote cluster:\n\n`appsody deploy ibmcase/[:tag] --no-build`\n\n- You can omit the `--no-build` flag to have Appsody perform a build before deploying the application.\n- _**Note:**_ Performing a build at deploy time requires specifying the absolute container reference path, as well as the `--push` flag.\n- The neccesary deployment parameter information will be read from the `app-deploy.yaml` file in the same directory.\n\n## Usage Details\n\n### REST APIs","fileAbsolutePath":"/home/runner/work/vaccine-solution-main/vaccine-solution-main/docs/src/pages/solution/cold-monitoring/index.mdx"}}}}